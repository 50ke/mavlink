/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE USV_SYSTEM_INFORMATION PACKING
package com.MAVLink.USV;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * system information
 */
public class msg_usv_system_information extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION = 50009;
    public static final int MAVLINK_MSG_LENGTH = 137;
    private static final long serialVersionUID = MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION;

    
    /**
     * Latitude (WGS84, EGM96 ellipsoid)
     */
    @Description("Latitude (WGS84, EGM96 ellipsoid)")
    @Units("degE7")
    public int lat;
    
    /**
     * Longitude (WGS84, EGM96 ellipsoid)
     */
    @Description("Longitude (WGS84, EGM96 ellipsoid)")
    @Units("degE7")
    public int lon;
    
    /**
     * system name
     */
    @Description("system name")
    @Units("")
    public byte name[] = new byte[128];
    
    /**
     * 0: not connected. 1: connected.
     */
    @Description("0: not connected. 1: connected.")
    @Units("")
    public short connect;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION;

        packet.payload.putInt(lat);
        packet.payload.putInt(lon);
        
        for (int i = 0; i < name.length; i++) {
            packet.payload.putByte(name[i]);
        }
                    
        packet.payload.putUnsignedByte(connect);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a usv_system_information message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.lat = payload.getInt();
        this.lon = payload.getInt();
        
        for (int i = 0; i < this.name.length; i++) {
            this.name[i] = payload.getByte();
        }
                
        this.connect = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_usv_system_information() {
        this.msgid = MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_usv_system_information( int lat, int lon, byte[] name, short connect) {
        this.msgid = MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION;

        this.lat = lat;
        this.lon = lon;
        this.name = name;
        this.connect = connect;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_usv_system_information( int lat, int lon, byte[] name, short connect, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.lat = lat;
        this.lon = lon;
        this.name = name;
        this.connect = connect;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_usv_system_information(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

         
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setName(String str) {
        int len = Math.min(str.length(), 128);
        for (int i=0; i<len; i++) {
            name[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<128; i++) {            // padding for the rest of the buffer
            name[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getName() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 128; i++) {
            if (name[i] != 0)
                buf.append((char) name[i]);
            else
                break;
        }
        return buf.toString();

    }
                           
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION - sysid:"+sysid+" compid:"+compid+" lat:"+lat+" lon:"+lon+" name:"+name+" connect:"+connect+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_USV_SYSTEM_INFORMATION";
    }
}
        